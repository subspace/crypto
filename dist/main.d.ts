/// <reference types="node" />
import * as interfaces from './interfaces';
export declare function getHash(value: string): string;
export declare function isValidHash(hash: string, value: string): boolean;
export declare function getRandom(): string;
export declare function read(buffer: Buffer): string;
export declare function stringify(value: string | object | any[]): string;
export declare function isDateWithinRange(date: number, range: number): boolean;
export declare function generateKeys(options: interfaces.optionsObject): Promise<any>;
export declare function getPrivateKeyObject(privateKey: string): Promise<any>;
export declare function sign(value: string | object | any[], privateKeyObject: any): Promise<any>;
export declare function isValidSignature(value: string | object | any[], signature: string, publicKey: string): Promise<any>;
export declare function createJoinProof(profile: any): Promise<any>;
export declare function isValidJoinProof(data: any[]): Promise<any>;
export declare function createLeaveProof(profile: any): Promise<any>;
export declare function isValidLeaveProof(data: any[], publicKey: string): Promise<any>;
export declare function createFailureProof(peerId: string, profile: any): Promise<any>;
export declare function isValidFailureProof(data: any[], publicKey: string): Promise<any>;
export declare function encryptAssymetric(value: string, publicKey: string): Promise<any>;
export declare function decryptAssymetric(value: string, privateKeyObject: object): Promise<any>;
export declare function encryptSymmetric(value: string, symkey: string): Promise<any>;
export declare function decryptSymmetric(encryptedValue: string, symkey: string): Promise<any>;
